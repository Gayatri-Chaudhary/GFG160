Given an unsorted array arr[]. Rotate the array to the left (counter-clockwise direction) by d steps, where d is a positive integer. Do the mentioned change in the array in place.
Note: Consider the array as circular.

Examples :
Input: arr[] = [1, 2, 3, 4, 5], d = 2
Output: [3, 4, 5, 1, 2]
Explanation: when rotated by 2 elements, it becomes 3 4 5 1 2.
Input: arr[] = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], d = 3
Output: [8, 10, 12, 14, 16, 18, 20, 2, 4, 6]
Explanation: when rotated by 3 elements, it becomes 8 10 12 14 16 18 20 2 4 6.
Input: arr[] = [7, 3, 9, 1], d = 9
Output: [3, 9, 1, 7]
Explanation: when we rotate 9 times, we'll get 3 9 1 7 as resultant array.


APPROACH:
For Left Rotation:
To rotate an array left by d steps:

Reverse the first 
𝑑
d elements.
Reverse the remaining 
𝑛
−
𝑑
n−d elements.
Reverse the entire array.
For Right Rotation:
To rotate an array right by 
𝑑
d steps:

Reverse the entire array.
Reverse the first 
𝑑
d elements.
Reverse the remaining 
𝑛
−
𝑑
n−d elements.


class Solution {
    public static void reverse(int arr[],int left,int right){
       while(left < right){
           int temp = arr[left];
           arr[left] = arr[right];
           arr[right] = temp;
           left++;
           right--;
       }
    }
    // Function to rotate an array by d elements in counter-clockwise direction.
    static void rotateArr(int arr[], int d) {
        int n = arr.length;
        d=d%n;
        
       
        // reverse first d-1 elements
        reverse(arr,0,d-1);
        // reverse elements fron d to n
        reverse(arr,d,n-1);
         // reverse whole array
        reverse(arr,0,n-1);
        
    }
}
